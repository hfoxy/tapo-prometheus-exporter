name: Release

on:
  release:
    types: [published]

jobs:
  build:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '^1.21.1'
          check-latest: true
          cache-dependency-path: src/go.sum

      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "build_timestamp=$(date '+%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT
          echo "version=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT

      - name: Check version
        run: |
          if [[ "${{ steps.vars.outputs.version }}" == "v"* ]]; then
            echo "Version starts with v"
          else
            echo "Version does not start with v"
            echo "Branch: '${{ steps.vars.outputs.branch }}'"
            echo "Version: '${{ steps.vars.outputs.version }}'"
            echo "SHA: '${{ steps.vars.outputs.sha_short }}'"
            exit 1
          fi

      - name: Install dependencies
        working-directory: src
        run: go mod download

      - name: Install golint
        working-directory: src
        run: go install golang.org/x/lint/golint@latest

      - name: lint
        working-directory: src
        run: golint

      - name: vet
        working-directory: src
        run: go vet

      - name: Build
        working-directory: src
        env:
          CGO_ENABLED: 0
        run: go build -ldflags="-s -w -X 'main.version=${{ steps.vars.outputs.version }}' -X 'main.commitHash=${{ steps.vars.outputs.branch }}-${{ steps.vars.outputs.sha_short }}' -X 'main.buildTimestamp=${{ steps.vars.outputs.build_timestamp }}'" -o tapo-prometheus-exporter .

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker build & push
        working-directory: src
        run: |
          docker image build -t "hfoxy4/tapo-prometheus-exporter:${{ steps.vars.outputs.version }}" .
          docker push -a "hfoxy4/tapo-prometheus-exporter"

      - uses: azure/setup-helm@v3
        with:
          version: 'v3.11.1'
        id: install

      - name: Update chart version
        working-directory: chart
        run: |
          sed -i "s/version: .*/version: ${{ steps.vars.outputs.version }}/g" Chart.yaml
          sed -i "s/appVersion: .*/appVersion: ${{ steps.vars.outputs.version }}/g" Chart.yaml

      - name: Helm lint
        working-directory: chart
        run: helm lint

      - name: Helm package
        working-directory: chart
        run: helm package .

      - name: Upload binary to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: src/tapo-prometheus-exporter
          asset_name: tapo-prometheus-exporter
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload chart to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: chart/tapo-prometheus-exporter-${{ steps.vars.outputs.version }}.tgz
          asset_name: tapo-prometheus-exporter-chart-${{ steps.vars.outputs.version }}.tgz
          tag: ${{ github.ref }}
          overwrite: true

      - name: Checkout chart repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHARTS_GITHUB_TOKEN }}
          repository: hfoxy/helm-charts
          path: helm-charts

      - name: Setup git
        working-directory: helm-charts
        run: |
          git config --global user.email "actions@hfox.me"
          git config --global user.name "GitHub Actions (tapo-prometheus-exporter)"

      - name: Create branch for new version
        working-directory: helm-charts
        run: |
          git checkout -b "tapo-prometheus-exporter-${{ steps.vars.outputs.version }}"
          git push -u origin "tapo-prometheus-exporter-${{ steps.vars.outputs.version }}"

      - name: Add new chart version
        working-directory: helm-charts
        run: |
          cp ../chart/tapo-prometheus-exporter-${{ steps.vars.outputs.version }}.tgz .
          helm repo index --url https://hfoxy.github.io/helm-charts/ .
          git add .
          git commit -m "Add tapo-prometheus-exporter-${{ steps.vars.outputs.version }}"
          git push

      - name: Create pull request in chart repo
        working-directory: helm-charts
        env:
          GITHUB_TOKEN: ${{ secrets.CHARTS_GITHUB_TOKEN }}
        run: gh pr create --title "Add tapo-prometheus-exporter-${{ steps.vars.outputs.version }}" --body "Add tapo-prometheus-exporter-${{ steps.vars.outputs.version }}" --base main --head "tapo-prometheus-exporter-${{ steps.vars.outputs.version }}"
